<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>LegalRisk AI</title>
  <script src="https://cdn.tailwindcss.com "></script>
  <script src="https://unpkg.com/react @18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom @18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/ @babel/standalone/babel.min.js"></script>

  <!-- Polyfill -->
  <script>
    if (typeof TextEncoder === 'undefined') {
      document.write('<script src="https://polyfill.io/v3/polyfill.min.js?features=TextEncoder%2CTextDecoder "><\/script>')
    }
  </script>

  <!-- PWA -->
  <link rel="manifest" href="./manifest.json" />
  <link rel="apple-touch-icon" href="./icon-192.png" />
  <meta name="theme-color" content="#6366F1" />
  <meta name="description" content="AI-–∞–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤" />
  <meta name="apple-mobile-web-app-capable" content="yes" />
  <meta name="apple-mobile-web-app-status-bar-style" content="default" />
</head>
<body class="bg-gray-50 text-gray-900 min-h-screen flex flex-col">
  <header class="bg-white shadow-sm border-b border-gray-200 py-4 px-6 flex justify-between items-center">
    <h1 class="text-xl font-bold text-indigo-600">LegalRisk AI</h1>
    <span class="text-xs bg-indigo-100 text-indigo-700 px-2 py-1 rounded-full">PWA</span>
  </header>

  <main id="root" class="flex-grow container mx-auto p-4 max-w-lg"></main>

  <footer class="py-4 bg-white border-t border-gray-200 text-center text-sm text-gray-500">
    ¬© {{ new Date().getFullYear() }} LegalRisk AI ‚Äî MVP –ü—Ä–æ—Ç–æ—Ç–∏–ø
  </footer>

  <script type="text/babel">
    const { useState } = React;

    function App() {
      const [screen, setScreen] = useState('dashboard');
      const [contracts, setContracts] = useState([
        { id: 1, name: "–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã", date: "2024-11-01", riskScore: 85 },
        { id: 2, name: "–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞", date: "2024-11-03", riskScore: 45 },
        { id: 3, name: "–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", date: "2024-11-05", riskScore: 65 }
      ]);
      const [selectedContract, setSelectedContract] = useState(null);
      const [user] = useState({
        name: "–ê–ª–µ–∫—Å–µ–π",
        email: "alex@example.com",
        role: "–Æ—Ä–∏—Å—Ç"
      });

      const mockAnalysis = {
        clauses: [
          { title: "–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã", riskLevel: "–í—ã—Å–æ–∫–∏–π", description: "–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã —É–∫–∞–∑–∞–Ω –∫–∞–∫ 1 –º–µ—Å—è—Ü –≤–º–µ—Å—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö 6 –º–µ—Å—è—Ü–µ–≤.", suggestions: ["–£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã", "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è"] },
          { title: "–®—Ç—Ä–∞—Ñ—ã", riskLevel: "–°—Ä–µ–¥–Ω–∏–π", description: "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ.", suggestions: ["–î–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç —à—Ç—Ä–∞—Ñ–∞ –¥–æ 50% –æ—Ç —Å—É–º–º—ã –¥–æ–≥–æ–≤–æ—Ä–∞"] },
          { title: "–§–æ—Ä—Å-–º–∞–∂–æ—Ä", riskLevel: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", description: "–ù–µ —É–∫–∞–∑–∞–Ω—ã —É—Å–ª–æ–≤–∏—è —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞", suggestions: ["–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ"] },
          { title: "GDPR", riskLevel: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", description: "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π GDPR –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º –¥–æ–≥–æ–≤–æ—Ä–µ", suggestions: ["–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö", "–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"] }
        ]
      };

      return (
        <div className="w-full">
          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
          <nav className="flex justify-around mt-4 mb-6 border-t border-gray-200 pt-2">
            <button onClick={() => setScreen('dashboard')} className={`font-medium ${screen === 'dashboard' ? 'text-indigo-600' : 'hover:text-indigo-500'}`}>
              –ü–∞–Ω–µ–ª—å
            </button>
            <button onClick={() => setScreen('upload')} className={`font-medium ${screen === 'upload' ? 'text-indigo-600' : 'hover:text-indigo-500'}`}>
              –ó–∞–≥—Ä—É–∑–∏—Ç—å
            </button>
            <button onClick={() => setScreen('analysis')} className={`font-medium ${screen === 'analysis' ? 'text-indigo-600' : 'hover:text-indigo-500'}`}>
              –ê–Ω–∞–ª–∏–∑
            </button>
            <button onClick={() => setScreen('profile')} className={`font-medium ${screen === 'profile' ? 'text-indigo-600' : 'hover:text-indigo-500'}`}>
              –ü—Ä–æ—Ñ–∏–ª—å
            </button>
          </nav>

          {/* –°—Ç—Ä–∞–Ω–∏—Ü—ã */}
          {screen === 'dashboard' && (
            <div>
              <h2 className="text-xl font-bold mb-4">–ü–∞–Ω–µ–ª—å —Ä–∏—Å–∫–æ–≤</h2>
              <div className="grid grid-cols-2 gap-4 mb-6">
                <div className="p-4 bg-white shadow rounded-md">
                  <p className="text-sm text-gray-500">–í—Å–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤</p>
                  <h3 className="text-2xl font-bold">{contracts.length}</h3>
                </div>
                <div className="p-4 bg-white shadow rounded-md">
                  <p className="text-sm text-gray-500">–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫</p>
                  <h3 className="text-2xl font-bold text-red-600">{contracts.filter(c => c.riskScore > 75).length}</h3>
                </div>
              </div>

              <div className="bg-white shadow rounded-lg overflow-hidden">
                <table className="min-w-full table-auto">
                  <thead className="bg-gray-100">
                    <tr>
                      <th className="px-4 py-2 text-left">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                      <th className="px-4 py-2 text-left">–î–∞—Ç–∞</th>
                      <th className="px-4 py-2 text-left">–†–∏—Å–∫</th>
                      <th className="px-4 py-2 text-right">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    {contracts.map(contract => (
                      <tr key={contract.id} className="border-b hover:bg-gray-50">
                        <td className="px-4 py-2 font-medium">{contract.name}</td>
                        <td className="px-4 py-2 text-sm">{contract.date}</td>
                        <td className="px-4 py-2 text-sm">
                          <span className={`inline-block px-2 py-1 rounded-full text-xs ${
                            contract.riskScore > 75 ? 'bg-red-100 text-red-800' :
                            contract.riskScore > 50 ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'
                          }`}>
                            {contract.riskScore}
                          </span>
                        </td>
                        <td className="px-4 py-2 text-right">
                          <button onClick={() => setSelectedContract(contract)} className="text-indigo-600 hover:text-indigo-800">
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {screen === 'upload' && (
            <div>
              <h2 className="text-xl font-bold mb-4">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä</h2>
              <div className="border-dashed border-2 border-indigo-500 p-8 text-center rounded mb-4 cursor-pointer"
                   onClick={() => alert("–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")}>
                <p className="text-indigo-600 font-medium">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</p>
                <p className="text-sm text-gray-500 mt-2">PDF, DOCX, TXT –¥–æ 20 –ú–ë</p>
              </div>
              <button onClick={() => alert("–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")} className="w-full border border-gray-300 p-3 text-center">
                –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –∫–∞–º–µ—Ä—ã
              </button>
            </div>
          )}

          {screen === 'analysis' && selectedContract && (
            <div>
              <h2 className="text-xl font-bold mb-4">–ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞</h2>
              <p className="mb-4 font-semibold">{selectedContract.name}</p>

              <h3 className="text-lg font-semibold mt-6 mb-2">üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è:</h3>
              {mockAnalysis.clauses.map((cl, idx) => (
                <div key={idx} className="p-4 bg-gray-100 rounded-md mb-3">
                  <strong>{cl.title}</strong> ‚Äî{' '}
                  <span className={
                    cl.riskLevel === '–í—ã—Å–æ–∫–∏–π' ? 'text-red-600' :
                    cl.riskLevel === '–°—Ä–µ–¥–Ω–∏–π' ? 'text-yellow-600' :
                    cl.riskLevel === '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π' ? 'text-red-700' : 'text-green-600'
                  }>
                    {cl.riskLevel}
                  </span>
                  <p className="mt-1 text-sm text-gray-600">{cl.description}</p>
                  <ul className="mt-2 text-sm text-gray-600">
                    {cl.suggestions.map((suggestion, i) => (
                      <li key={i}>‚Ä¢ {suggestion}</li>
                    ))}
                  </ul>
                </div>
              ))}

              <button onClick={() => setScreen('dashboard')} className="mt-4 w-full bg-indigo-600 text-white p-3 rounded-md">
                –ù–∞–∑–∞–¥
              </button>
            </div>
          )}

          {screen === 'profile' && (
            <div>
              <h2 className="text-xl font-bold mb-4">–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
              <div className="p-4 bg-white shadow rounded-md mb-4">
                <p><strong>–ò–º—è:</strong> {user.name}</p>
                <p><strong>Email:</strong> {user.email}</p>
                <p><strong>–†–æ–ª—å:</strong> {user.role}</p>
              </div>

              <div className="p-4 bg-white shadow rounded-md">
                <h3 className="font-semibold mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                <label className="block mb-4">
                  –¢–µ–º–Ω–∞—è —Ç–µ–º–∞:
                  <select className="ml-2 border border-gray-300 rounded p-1">
                    <option>–°–≤–µ—Ç–ª–∞—è</option>
                    <option>–¢–µ–º–Ω–∞—è</option>
                  </select>
                </label>
                <button onClick={() => alert("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")} className="w-full border border-gray-300 p-2 rounded">
                  –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                </button>
              </div>
            </div>
          )}
        </div>
      );
    }

    ReactDOM.createRoot(document.getElementById('root')).render(<App />);
  </script>
</body>
</html>
